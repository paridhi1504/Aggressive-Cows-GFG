class Solution {
public:

    int solve(int n, int k, vector<int> &stalls) {
    
        // Write your code here
     
    
     sort(stalls.begin(), stalls.end());
        
        int start = 1;
        int end = stalls.back() - stalls.front();
        int result = -1;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            if (isPossible(stalls, k, mid)) {
                result = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        
        return result;
    }
    
private:
    bool isPossible(const vector<int>& stalls, int k, int minDist) {
        int cowsPlaced = 1;
        int prevPos = stalls[0];
        
        for (int i = 1; i < stalls.size(); i++) {
            if (stalls[i] - prevPos >= minDist) {
                cowsPlaced++;
                prevPos = stalls[i];
            }
            if (cowsPlaced == k)
                return true;
        }
        
        return false;
    }
    
    
};
